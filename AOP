[AOP : 관점 지향 프로그래밍] (Aspect Oriented Programming)
: 기존 OOP를 보완한 개념(핵심사항과 공통관심사항을 분리하여 구현)

AOP는 primary concern과 cross-cutting concern을 별도의 코드로 구현해서 최종적으로 이둘을 조합해서 완성하는 것

# 주요 용어
- 핵심관심 사항(core(primary) conern) : 비즈니스로직 (주 업무)
- 공통관심 사항(횡단관심사항 : cross-cutting concern) : 부가적인 기능 (보조 업무)
     * 비즈니스로직은 core + cross-cutting 도 될 수 있다.
- Code : Primary Concern을 구현한 코드
- Advice : cross-cutting concern을 구현한 코드
- JointPoint : code와 advice를 연결해 주는 설정 정보, advice가 적용 가능한 지점(메소드 호출, 필드값 변경)
- Point-cut : JointPoint의 부분집합으로 실제 advice가 적용되는 JointPoint
- Weaving : Code,  Advice, Point-cut등을 조합해서 어플리케이션을 만들어 가는 과정
- Target : 핵심사항(core)이 구현된 객체

AOP(Aspect Oriented Programming)의 Aspect는 Advice와 Point-cut을 함께 지칭하는 단어

* 스프링은 자체적인 프록시 기반의 AOP를 지원
     필드값 변경과 같은 Jointpoint는 사용할 수 없다.
     메소드 호출 jointpoint만 지원한다.
     스프링 AOP는 완전한 AOP를 지원하는 것이 목적이 아니라 엔터프라이즈 어플리케이션을 구현하는데 필요한 정도의 기능 제공을 목적으로 하고 있다.

* AOP 구현
     - 설정파일을 이용하는 방법 (XML 스키마 기반의 구현방법)
     - 어노테이션을 이용하는 방법 (@AspectJ 어노테이션 기반의 AOP구현)

* 스프링에서 AOP 구현 방법은 Proxy를 이용한다.
     client ————> proxy ————> Target
     (호출부)           (대리인/대행)            (핵심기능)

[XML 기반의 AOP 구현과정]
. 의존설정(pom.xml)
<!— AOP —>
<dependency>
     <groupId>org.aspectj</groupId>
     <artifactId>aspectjweaver</artifactId>
     <version>1.7.4</version>
</dependency>

. 공통기능 클래스 제작 - Advice 역할 클래스

. XML파일에 Aspect 

[Advice 실행 종류]
<aop:before> : 핵심기능이 실행 되기 전에 advice를 실행한다.
<aop:after-returning> : 정상적으로 핵심기능 실행 후에 advice를 실행
<aop:after-throwing> : 핵심기능 실행 중에 exception이 발생시에만 advice를 실행
<aop:after> : 핵심기능 실행 후에 advice를 실행한다.
<aop:around> : 핵심기능 실행 전/후 및 exception 발생시  advice 실행한다.

[AspectJ Pointcut 표현식]
Pointcut 을 지정할 때 사용하는 표현식으로 AspectJ문법을 사용한다.

* : 모든
. : 현재
.. : 0개이상

execution : (“execution(public void get*(..))”)     // public void인 모든 get메소드(인자가 0개 또는 그이상)
                 : (“execution(* com.test.aop.*.*())”)     //com.test.aop 패키지에 파라미터가 없는 모든 메소드
                 : (“execution(* com.test.aop..*.*())”)     //com.test.aop 패키지 & com.test.aop 하위패키지에 파라미터가 없는 모든 메소드
                 : (“execution(* com.test.aop.Staff.*())”)     //com.test.aop.Staff안의 모든 메소드

within : ("within(com.test.aop.*)”)         //com.test.aop패키지 안에 있는 모든 메소드
          : ("within(com.test.aop..*)”)          //com.test.aop패키지 및 하위패키지 안에 있는 모든 메소드
          : ("within(com.test.aop.Staff)”)          //com.test.aop.Staff 모든 메소드 

bean : (“bean(staff)”)     //staff 빈에만 적용
         : (“bean(*er)”)     //er로 끝나는 빈에만 적용