DI (Dependency Injection) 의존성 주입

> DI 스프링의 핵심 개념 중 하나
> 객체 사이의 의존 관계를 객체 자신이 아닌 외부 (스프링 컨테이너)에서 수행하는 개념
> 의존관계의 설정은 설정파일(bean.xml)이나 어노테이션을 이용하여 설정


============================================
// A 객체에서 B객체를 생성 ( 일반적인 방식)
public class A {
     B b = new B();

     public void print() {
          b.a();
     }
}

public class B {
     public void a() {
          System.out.println(“B객체의 a() 메소드입니다!”);
     }
}

A가 B에 있는 기능을 사용하기 위해서는 A객체에서 B객체를 생성하고 B객체의 메소드를 사용해야 한다. 
이때 A는 B에 의존한다 ( A has a B)
B에 변경사항이 발생시 A객체에도 영향을 미치게 된다. 이를 종속관계에 있다고 한다.
============================================


DI 는
의존하는 객체에 대한 획득을 클래스에서 하지 않고 스프링 컨테이너가 주입(제공)해 준다.
A 클래스에서 B b = new B();를 사용하지 않고 스프링 컨테이너가 만들어 놓은 BB클래스의 instance(bean)를 주입 받는다.
설정은 xml 설정을 통해서 이루어진다.


[의존성 주입 종류]
setter (설정 메소드)를 이용한 주입
: 설정 메소드를 사용하여 의존성 주입

Constructor (생성자)를 통한 주입
: 생성자를 사용하여 의존성을 주입하는 것


[의존성 주입(DI)의 장점]
DI를 사용하면 개발 계획시에 시간이 요구 되지만, 규모가 큰 프로젝트에서 유지보수 업무를 한다면 DI 개발의 장점을 느낄 수 있다.

[의존 관계 설정 방법]
- XML 파일을 이용한 설정방법

- JAVA를 이용한 설정방법 ( 어노테이션을 이용. @Configuration, @Bean)
     : 어노테이션(Annotation : Metadata) - JDK5부터 등장   ex) @Override
     선언시에는 @를 사용하여 선언
     어노테이션은 아래의 경우에 사용한다.
          - 컴파일러에게 정보를 알려주거나
          - 컴파일 할 때와 설치(deployment)시의 작업을 지정하거나
          - 실행할 때 별도의 처리가 필요한 경우
     클래스, 메소드, 변수 등 모든 요소에 선언가능

     # @Configuration : 클래스 앞에 선언하는데, “이 클래스는 스프링 설정에 사용되는 클래스 입니다.” 라고 알려주는 어노테이션
     # @Bean : 메소드 앞에 선언, “객체를 생성"

- XML과 JAVA를 혼용해서 사용하는 방법 : XML파일과 JAVA파일을 같이 사용해서 스프링 설정을 하는 방법
